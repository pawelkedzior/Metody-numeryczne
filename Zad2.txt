//Pawe³ Kêdzior zadanie drugie

#include <iostream>
#include <fstream>

using namespace std;

int main (void)
{
    int i=0;
    int j=0;
    float macierz[128][128];
    float x[128];
    float a[128];
    fstream plik;
    plik.open("Zad2.txt",ios::out);
    for (i=0;i<128;i++) //tworzenie wektora wyników z
        a[i]=1;
    for (i=0;i<128;i++) //tworzenie macierzy A
        {
           for (j=0;j<128;j++)
               {
                if (j==i)
                   macierz[j][i]=4;
                else
                    if (i==j-1||i==j+1||i==j-4||i==j+4)
                       macierz[j][i]=1;
                    else
                        macierz[j][i]=0;
               }
        }
    for (i=0;i<128;i++)//Tworzenie wektora x
        x[i]=1;
        
//Metoda Gaussa-Seidela        
        
    for (int h=0;h<30;h++)//Wykonywanie trzydziestu przybli¿eñ - metoda Gaussa-Seidela
    {
    for (i=0;i<128;i++)
        {
              float  f=0;
              for (j=0;j<128;j++)
                  {
                   if ((j==i-4)||(j==i-1)||(j==i+1)||(j==i+4))
                      f=f+x[j]*macierz[i][j];
                  }
              x[i]=(a[i]-f)/macierz[i][i];
        }
    }  
    plik<<"Metoda Gaussa-Seidela"<<endl; //Wypisywanie obliczonego przybli¿enia wektora x
    plik<<"Warunki pocz¹tkowe:\nWektor x sk³ada siê z samych jedynek, ";
    plik<<"wektor wynikowy równie¿."<<endl<<endl;
    plik<<"Wyniki 30-stu przybli¿eñ:"<<endl;
    for (i=0;i<128;i++)  
        plik<<"x"<<i+1<<"="<<x[i]<<endl;
        
//Metoda Jakobiego        
        
    for (i=0;i<128;i++) //Tworzenie nowego wektora x
        x[i]=1;
    {
        float x2[128];
        for (i=0;i<128;i++) //Tworzenie kopii wektora x
            x2[i]=1;  
        for (int h=0;h<5000;h++)//Wykonywanie piêciu tysiêcy przybli¿eñ - metoda Jakobiego
            {
                 for (i=0;i<128;i++)
                 {
                     float  f=0;
                     for (j=0;j<128;j++)
                     {
                          if ((j==i-4)||(j==i-1)||(j==i+1)||(j==i+4))
                             f=f+x2[j]*macierz[i][j];
                     }
                     x[i]=(a[i]-f)/macierz[i][i];
                 }
                 for (i=0;i<128;i++)
                     x2[i]=x[i];
            }  
    }
    plik<<endl<<endl<<"Metoda Jakobiego"<<endl; //Wypisywanie obliczonego przybli¿enia wektora x
    plik<<"Warunki pocz¹tkowe:\nWektor x sk³ada siê z samych jedynek, ";
    plik<<"wektor wynikowy równie¿."<<endl<<endl;
    plik<<"Wyniki piêciu tysiêcy przybli¿eñ:"<<endl;
    for (i=0;i<128;i++)  
        plik<<"x"<<i+1<<"="<<x[i]<<endl;
        
//Metoda sprzê¿onych gradientów        
        
    {
        for (i=0;i<128;i++) //Tworzenie nowego wektora x
            x[i]=1;
        float pk[128];
        float p[128];
        float rk[128];
        float r[128];
        float alfa;
        float beta;
        for (i=0;i<128;i++)//Obliczanie pierwszych p i r
            {
             float f=0;
             for (j=0;j<128;j++)
                 {
                  if ((j==i-4)||(j==i-1)||(j==i+1)||(j==i+4)||(j==i))              
                     f=f+macierz[i][j]*x[j];
                 }
             r[i]=a[i]-f;
             p[i]=r[i];
            }
        for (int h=0;h<18;h++)//Wykonywanie powtórzeñ
           {
            {//Obliczanie wspó³czynnika alfa
            float f=0;
            float e=0;
            for (i=0;i<128;i++)
                {
                 f+=r[i]*r[i];
                 pk[i]=0;
                 for (j=0;j<128;j++)
                     {
                          if ((j==i-4)||(j==i-1)||(j==i+1)||(j==i+4)||(j==i))
                             pk[i]+=macierz[i][j]*p[j];
                     }
                 e+=p[i]*pk[i];
                }
            alfa=f/e;
            }
            for (i=0;i<128;i++)//obliczanie k+1-szego r
                rk[i]=r[i]-pk[i]*alfa;
            {//obliczanie wspó³æzynnika beta    
             float f=0;
             float e=0;
             for (j=0;j<128;j++)
                 {
                     f+=rk[j]*rk[j];
                     e+=r[j]*r[j];
                 }
             beta=f/e;
            }
            for (i=0;i<128;i++)//Obliczanie k+1-szego wspó³czynnika p oraz k+1-szego przybli¿enia.
                {
                 x[i]+=alfa*p[i];
                 p[i]=rk[i]+beta*p[i];
                 r[i]=rk[i];
                }
           }
           plik<<endl<<endl<<"Metoda sprzê¿onych gradientów"<<endl; //Wypisywanie obliczonego przybli¿enia wektora x
           plik<<"Warunki pocz¹tkowe:\nWektor x sk³ada siê z samych jedynek, ";
           plik<<"wektor wynikowy równie¿."<<endl<<endl;
           plik<<"Wyniki osiemnastu przybli¿eñ:"<<endl;
           for (i=0;i<128;i++)  
               plik<<"x"<<i+1<<"="<<x[i]<<endl;
    }    
    plik.close();
    return 0;
}


Metoda Gaussa-Seidela
Warunki pocz¹tkowe:
Wektor x sk³ada siê z samych jedynek, wektor wynikowy równie¿.

Wyniki 30-stu przybli¿eñ:
x1=0.194277
x2=0.13093
x3=0.146795
x4=0.162311
x5=0.0919623
x6=0.135208
x7=0.119579
x8=0.111997
x9=0.140354
x10=0.116698
x11=0.127685
x12=0.129767
x13=0.117926
x14=0.129961
x15=0.123215
x16=0.123324
x17=0.128215
x18=0.122319
x19=0.126169
x20=0.125508
x21=0.123571
x22=0.126378
x23=0.124283
x24=0.124906
x25=0.125616
x26=0.124315
x27=0.125416
x28=0.12497
x29=0.124746
x30=0.125331
x31=0.12477
x32=0.125051
x33=0.125098
x34=0.124844
x35=0.125123
x36=0.124958
x37=0.124966
x38=0.125072
x39=0.124936
x40=0.125028
x41=0.12501
x42=0.124968
x43=0.125032
x44=0.124983
x45=0.124999
x46=0.125014
x47=0.124984
x48=0.12501
x49=0.124999
x50=0.124994
x51=0.125008
x52=0.124995
x53=0.125001
x54=0.125002
x55=0.124996
x56=0.125003
x57=0.124999
x58=0.124999
x59=0.125002
x60=0.124999
x61=0.125
x62=0.125001
x63=0.124999
x64=0.125
x65=0.125
x66=0.124999
x67=0.125001
x68=0.125
x69=0.124998
x70=0.125002
x71=0.124999
x72=0.124999
x73=0.125003
x74=0.124996
x75=0.125003
x76=0.125002
x77=0.124994
x78=0.125008
x79=0.124994
x80=0.124998
x81=0.125011
x82=0.124983
x83=0.125014
x84=0.125
x85=0.124981
x86=0.125033
x87=0.124968
x88=0.125009
x89=0.12503
x90=0.124935
x91=0.125071
x92=0.124967
x93=0.124956
x94=0.125124
x95=0.124844
x96=0.125097
x97=0.125052
x98=0.124769
x99=0.125331
x100=0.124747
x101=0.124969
x102=0.125416
x103=0.124315
x104=0.125614
x105=0.124907
x106=0.124282
x107=0.126378
x108=0.123572
x109=0.125506
x110=0.126169
x111=0.12232
x112=0.128214
x113=0.123325
x114=0.123215
x115=0.12996
x116=0.117927
x117=0.129766
x118=0.127686
x119=0.116698
x120=0.140354
x121=0.111998
x122=0.119578
x123=0.135208
x124=0.0919628
x125=0.162311
x126=0.146795
x127=0.13093
x128=0.194277

Metoda Jakobiego
Warunki pocz¹tkowe:
Wektor x sk³ada siê z samych jedynek, wektor wynikowy równie¿.

Wyniki piêciu tysiêcy przybli¿eñ:
x1=0.194277
x2=0.130931
x3=0.146795
x4=0.162312
x5=0.0919634
x6=0.135208
x7=0.11958
x8=0.111998
x9=0.140355
x10=0.1167
x11=0.127687
x12=0.129769
x13=0.117928
x14=0.129962
x15=0.123218
x16=0.123326
x17=0.128217
x18=0.122322
x19=0.126171
x20=0.125511
x21=0.123574
x22=0.126381
x23=0.124286
x24=0.124909
x25=0.125619
x26=0.124318
x27=0.125419
x28=0.124974
x29=0.12475
x30=0.125335
x31=0.124774
x32=0.125055
x33=0.125102
x34=0.124848
x35=0.125127
x36=0.124962
x37=0.12497
x38=0.125076
x39=0.124941
x40=0.125033
x41=0.125015
x42=0.124973
x43=0.125037
x44=0.124988
x45=0.125004
x46=0.125019
x47=0.124989
x48=0.125015
x49=0.125004
x50=0.125
x51=0.125013
x52=0.125
x53=0.125007
x54=0.125008
x55=0.125002
x56=0.125008
x57=0.125005
x58=0.125005
x59=0.125007
x60=0.125004
x61=0.125006
x62=0.125006
x63=0.125005
x64=0.125006
x65=0.125006
x66=0.125005
x67=0.125006
x68=0.125006
x69=0.125004
x70=0.125007
x71=0.125005
x72=0.125005
x73=0.125008
x74=0.125002
x75=0.125008
x76=0.125007
x77=0.125
x78=0.125013
x79=0.125
x80=0.125004
x81=0.125015
x82=0.124989
x83=0.125019
x84=0.125004
x85=0.124988
x86=0.125037
x87=0.124973
x88=0.125015
x89=0.125033
x90=0.124941
x91=0.125076
x92=0.12497
x93=0.124962
x94=0.125127
x95=0.124848
x96=0.125102
x97=0.125055
x98=0.124774
x99=0.125335
x100=0.12475
x101=0.124974
x102=0.125419
x103=0.124318
x104=0.125619
x105=0.124909
x106=0.124286
x107=0.126381
x108=0.123574
x109=0.125511
x110=0.126171
x111=0.122322
x112=0.128217
x113=0.123326
x114=0.123218
x115=0.129962
x116=0.117928
x117=0.129769
x118=0.127687
x119=0.1167
x120=0.140355
x121=0.111998
x122=0.11958
x123=0.135208
x124=0.0919635
x125=0.162312
x126=0.146795
x127=0.130931
x128=0.194277

Metoda sprzê¿onych gradientów
Warunki pocz¹tkowe:
Wektor x sk³ada siê z samych jedynek, wektor wynikowy równie¿.

Wyniki osiemnastu przybli¿eñ:
x1=0.194277
x2=0.13093
x3=0.146795
x4=0.162311
x5=0.0919626
x6=0.135208
x7=0.119579
x8=0.111997
x9=0.140354
x10=0.116698
x11=0.127685
x12=0.129767
x13=0.117926
x14=0.12996
x15=0.123216
x16=0.123324
x17=0.128215
x18=0.12232
x19=0.126168
x20=0.125508
x21=0.123571
x22=0.126378
x23=0.124283
x24=0.124906
x25=0.125616
x26=0.124315
x27=0.125415
x28=0.12497
x29=0.124746
x30=0.125331
x31=0.12477
x32=0.125051
x33=0.125099
x34=0.124844
x35=0.125123
x36=0.124958
x37=0.124965
x38=0.125071
x39=0.124936
x40=0.125028
x41=0.125009
x42=0.124969
x43=0.125032
x44=0.124983
x45=0.124999
x46=0.125013
x47=0.124985
x48=0.125009
x49=0.125
x50=0.124994
x51=0.125006
x52=0.124997
x53=0.124999
x54=0.125002
x55=0.124998
x56=0.125001
x57=0.125
x58=0.125
x59=0.125
x60=0.125
x61=0.125
x62=0.125
x63=0.125
x64=0.125
x65=0.125
x66=0.125
x67=0.125
x68=0.125
x69=0.125
x70=0.125
x71=0.125
x72=0.125
x73=0.125001
x74=0.124998
x75=0.125002
x76=0.124999
x77=0.124997
x78=0.125006
x79=0.124994
x80=0.125
x81=0.125009
x82=0.124985
x83=0.125013
x84=0.124999
x85=0.124983
x86=0.125032
x87=0.124969
x88=0.125009
x89=0.125028
x90=0.124936
x91=0.125071
x92=0.124965
x93=0.124958
x94=0.125123
x95=0.124844
x96=0.125099
x97=0.125051
x98=0.12477
x99=0.125331
x100=0.124746
x101=0.12497
x102=0.125415
x103=0.124315
x104=0.125616
x105=0.124906
x106=0.124283
x107=0.126378
x108=0.123571
x109=0.125508
x110=0.126168
x111=0.12232
x112=0.128215
x113=0.123324
x114=0.123216
x115=0.12996
x116=0.117926
x117=0.129767
x118=0.127685
x119=0.116698
x120=0.140354
x121=0.111997
x122=0.119579
x123=0.135208
x124=0.0919625
x125=0.162311
x126=0.146795
x127=0.13093
x128=0.194277